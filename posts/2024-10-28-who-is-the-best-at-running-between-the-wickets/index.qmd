---
title: Who is the best at running between the wickets?
date: "2024-11-13"
categories: [cricket, data science, r, visualisation]
---

```{r setup}
library(dplyr)
library(ggplot2)
library(randomForest)
```

Over the past few months, I've taken an interest in baseball analytics because there is so much cricket can learn from what has been done there. I've learnt that base running is a large component of the game, which struck me as odd since running between the wickets is neglected in cricket. But should it be? In this post, I will quantify the effect that a strong runner between the wickets has upon the team.

To do this, I am going to use wagonwheel data of where a batter hits the ball and how many runs they end up scoring. I will then build a model that predicts the number of runs they are expected to score, and we can then compare these predictions to the actual runs scored for different batters.

Firstly, lets take a look at the dataset that I am using. I am using ball by ball data that has been put together by [Himanish Ganjoo](https://twitter.com/hganjoo_153). The dataset that I am using has been filtered so that it contains only the following:

* T20 Blast from 2015 to 2024 (to limit the size of the dataset but still have plenty of data for each player)
* Matches played at the 18 major England and Wales stadiums (because some of the outgrounds that get used can have unusual dimensions)
* Balls from outside the powerplay (because this causes the distribution of runs to vary significantly)
* Balls that did not go for a boundary
* Balls with wagonwheel data (I'm assuming that these are only deliveries where the batter hit the ball)

```{r load data}
source("data.R")

### ensure that we are removing wagonZone == 0 (rather than wagonX or wagonY)
### should save these datasets to file so I don't need to keep on reading them in
### thinking about it, I should do this only for deliveries where the batter scored runs. Or investigate the wagonX and wagonY when they don't - most of these deliveries go straight to the keeper, and I am interested in what happens when the batter hits the ball and it goes somewhere in the field.
### some notes: 180, 165 is coords for bowled/lbw. 180, 140 is coords for caught behind. 180, 140 is misses and go to keeper. We should remove these two.
### also filter to wagonX <= 368, wagonY <= 380 (and both >= 0)
### There are also a lot of values where we have 180, 125 and 180, 204. What do these both mean? 180, 125 is also goes straight to keeper. 180, 204 is straight back to bowler
### Probably just get rid of all of these sorts of values tbh
### Once I have got rid of these values and other values through K means, I should optimize hyperparameters (in particular best tree split size)
```
Lets take a look at this wagonwheel data, using different colours to denote the number of runs ran.

## plot wagonwheel data with colours of runs ran

## some comments about this graph

Lets now think about building the model. I should include the following variables in the model:
* wagonX and wagonY (obviously)
* ground (grounds can vary in size, which means that smaller grounds will have less twos)
* bowl_kind (since I don't have fielding data, this helps give a proxy of where the fielders are positioned)
* bat_hand (this also helps gives a proxy of what the field is like)
* innings_balls_remaining (towards the later stages of a game, batters will take more risks)

I will use a random forest model, using the [randomForest](https://cran.r-project.org/web/packages/randomForest/index.html) package in R. You can see the full code for training the model from the data on my [GitHub](LINK TO MODEL TRAINING)

```{r}
rf_model <- randomForest(
  score_minus_wides_and_noballs ~ 1 +
    wagonX +
    wagonY +
    ground +
    bowl_kind +
    bat_hand +
    balls_rem,
  data = t20_bbb,
  ntree = 100,
  mtry = 3,
  nodesize = 20,
  importance = TRUE
)

##  need to save this model to file so dont need to keep on loading it in. Is this reproducible each time or do I need to set a seed?
```


I now want to check that this model is giving us sensible predictions. Lets take a look at its predictions for deliveries at Edgbaston in our dataset.

```{r analyse predictions}
t20_bbb <- t20_bbb %>%
  mutate(pred = pmax(pmin(as.numeric(predict(rf_model)), 3), 0))

t20_bbb %>%
  #filter(ground == "Edgbaston, Birmingham") %>%
  ggplot(aes(x = -wagonX, y = wagonY, fill = pred)) +
  geom_tile(color = "white") +  # Add a white border to the tiles for better visibility
  facet_grid(bowl_kind ~ bat_hand) + 
  scale_fill_gradientn(
    #colors = c("red", "blue"),,
    values = scales::rescale(c(0,3)),
    #colors = c("red", "orange", "blue", "lightblue"),
    colors = c("#FF0000", "orange", "blue", "#00FFFF"),  # Define the colors
                       #values = scales::rescale(c(0, 1, 2, 3)),  # Rescale values
                       limits = c(0, 3), 
                       name = "Prediction") + 
  labs(#title = "Predictions by -wagonX and wagonY for Ground: Edgbaston, Birmingham",
       x = NULL, y = NULL) +  # Remove axis labels
  theme_minimal() +
  theme(panel.spacing = unit(2, "lines")) +  # Increase spacing between facets
  geom_point(size = 4, shape = 21, color = "black", alpha = 0.7) +  # Add points with fixed size
  scale_size_continuous(range = c(4, 4)) +  # Set all points to the same size
  theme(axis.text.x = element_blank(),   # Remove x-axis text
        axis.ticks.x = element_blank(),  # Remove x-axis ticks
        axis.text.y = element_blank(),   # Remove y-axis text
        axis.ticks.y = element_blank())   # Remove y-axis ticks
```


To be perfectly honest, I wasn't expecting the model to come out as good as this. The graphs make a lot of intuitive sense to anyone who knows T20 cricket for a variety of reasons:
* You can make out where the boundary fielders usually are, particuarly for the spinners - three on the leg side and two on the off.
* You can also make out fielding positions that are almost always on the edge of the ring - for example backward point and extra cover.
* The deep third man/deep fine leg positions score a lot more highly for spin compared to pace - there very rarely is a fielder on the boundary behind square for spinners.

So, given that we're happy with the model, lets see the results! Which batters score a lot more runs than expected? Lets take a look...

```{r}
results_df <- bind_rows(
	t20_bbb %>%
		filter(!is.na(p_bat)) %>%
		select(p_bat, score_minus_wides_and_noballs, pred) %>%
		rename(player_id = p_bat),
	t20_bbb %>%
		filter(!is.na(p_nonstriker_bat)) %>%
		select(p_nonstriker_bat, score_minus_wides_and_noballs, pred) %>%
		rename(player_id = p_nonstriker_bat)
) %>%
	group_by(player_id) %>%
		summarise(
			number = n(),
			extra_run_ave = mean(score_minus_wides_and_noballs - pred)
		) %>%
		arrange(extra_run_ave) %>%
		filter(number >= 100) %>%
		left_join(players_df)
```

What about those who do a lot worse than expected

## bottom run scorers and some commentary about it

Given our analysis, can we say how many extra runs X contributes to Y? On average, these are the number of non boundary deliveries that each position is in for (so including both on strike and at the bowlers end) during a T20 match:

So if we were choosing between X and Y for position Z in the team, X is expected to contribute W extra runs to the team score because of his running ability.

Whilst we have quantified the number of runs that each batter will directly contribute through their running ability, there are also indirect effects of running ability that haven't been quantified: a batter can feel pressure if they are struggling to rotate the strike leading to them and potentially their partner too being more likely to lose their wicket on a future delivery. Also from my experience of watching cricket, a team are more likely to be let down if one batter is slow rather than being  being benefitted from one batter being fast - the time it takes to complete a run will only be as quick as the slowest of the two runners.
